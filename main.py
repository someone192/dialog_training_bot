import operator
from aiogram import Bot, Dispatcher, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, User, ContentType
from aiogram_dialog import Dialog, DialogManager, StartMode, Window, setup_dialogs
from aiogram_dialog.widgets.kbd import Button, Row, Url, Column, Group, Select, Checkbox, ManagedCheckbox, Multiselect, Radio
from aiogram_dialog.widgets.text import Const, Format, List #Here we will import widgets we need
from aiogram_dialog.widgets.media import StaticMedia
from environs import Env
from pprint import pprint

env = Env()
env.read_env()

BOT_TOKEN = env('BOT_TOKEN')

bot = Bot(token=BOT_TOKEN, default= DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

router = Router()

class StartSG(StatesGroup):
    start = State()
    #con1 = State()


# –≠—Ç–æ —Ö—ç–Ω–¥–ª–µ—Ä, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π —Ç–æ–≤–∞—Ä–æ–≤
async def category_selection(callback: CallbackQuery, widget: Select,
                             dialog_manager: DialogManager, item_id: str):
    print(f'–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å id={item_id}')


async def checkbox_clicked(callback: CallbackQuery, checkbox: ManagedCheckbox,
                           dialog_manager: DialogManager):
    dialog_manager.dialog_data.update(is_checked=checkbox.is_checked())


# –≠—Ç–æ –≥–µ—Ç—Ç–µ—Ä
async def get_categories(**kwargs):
    categories = [
        ('–¢–µ—Ö–Ω–∏–∫–∞', 1),
        ('–û–¥–µ–∂–¥–∞', 2),
        ('–û–±—É–≤—å', 3),
    ]
    return {'categories': categories}


async def getter(dialog_manager: DialogManager, **kwargs):
    checked=dialog_manager.dialog_data.get('is_checked')
    return{
        'checked':checked,
        'not_checked':not checked
        }


async def get_topics(dialog_manager: DialogManager, **kwargs):
    topics = [
        ("IT", '1'),
        ("–î–∏–∑–∞–π–Ω", '2'),
        ("–ù–∞—É–∫–∞", '3'),
        ("–û–±—â–µ—Å—Ç–≤–æ", '4'),
        ("–ö—É–ª—å—Ç—É—Ä–∞", '5'),
        ("–ò—Å–∫—É—Å—Å—Ç–≤–æ", '6'),
    ]
    return {'topics':topics}

'''async def get_languages(dialog_manager:DialogManager, **kwargs):
    checked=dialog_manager.find('radio_lang').get_checked()
    language = {
        '1': 'en',
        '2': 'ru',
        '3': 'fr'
    }
    chosen_lang = language['2' if not checked else checked]
    lang = {
        'ru': {
            '1': 'üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
            '2': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
            '3': 'üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
            'text': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫'
        },
        'en': {
            '1': 'üá¨üáß English',
            '2': 'üá∑üá∫ Russian',
            '3': 'üá´üá∑ French',
            'text': 'Choose language'
        },
        'fr': {
            '1': 'üá¨üáß Anglais',
            '2': 'üá∑üá∫ Russe',
            '3': 'üá´üá∑ Fran√ßais',
            'text': 'Choisissez la langue'
        }
    }
    languages = [
        (f"{lang[chosen_lang]['1']}", '1'),
        (f"{lang[chosen_lang]['2']}", '2'),
        (f"{lang[chosen_lang]['3']}", '3'),
    ]
    return{'languages': languages,
           'text': lang[chosen_lang]['text']}
'''
'''start_dialog = Dialog(
    Window(
        Format(text='{text}'),
        Column(
            Radio(
                checked_text=Format('üîò {item[0]}'),
                unchecked_text=Format('‚ö™Ô∏è {item[0]}'),
                id='radio_lang',
                item_id_getter=operator.itemgetter(1),
                items='languages',
            ),
        ),
        state=StartSG.start,
        getter=get_languages
    )
)'''

'''start_dialog = Dialog(
    Window(
        Const(text='–û—Ç–º–µ—Ç—å—Ç–µ —Ç–µ–º—ã –Ω–æ–≤–æ—Å—Ç–µ–π üëá'),
        Column(
            Multiselect(
                checked_text=Format('[‚úîÔ∏è] {item[0]}'),
                unchecked_text=Format('[  ] {item[0]}'),
                id='multi_topics',
                item_id_getter=operator.itemgetter(1),
                items='topics',
                min_selected=2,
                max_selected=4,
            ),
        ),
        state=StartSG.start,
        getter=get_topics
    ),
)'''

start_dialog = Dialog(
    Window(
        Const(text='Cat'),
        StaticMedia(
            url='https://telegra.ph/file/ac76e3f1551f7d59de970.jpg',
            type=ContentType.PHOTO
        ),
    state=StartSG.start,
    ),
)

@router.message(CommandStart())
async def command_start_process(message: Message, dialog_manager: DialogManager):
    await dialog_manager.start(state=StartSG.start, mode=StartMode.RESET_STACK)

#@router.message(Command(commands='con1'))
#async def command_start_process(message: Message, dialog_manager: DialogManager):
#    await dialog_manager.start(state=StartSG.con1)


if __name__ == '__main__':
    dp.include_router(router)
    dp.include_router(start_dialog)
    setup_dialogs(dp)
    dp.run_polling(bot)